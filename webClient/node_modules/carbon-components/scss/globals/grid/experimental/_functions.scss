@import 'sass-list-maps';

// Transform the gutter property into a padding property for web
@function addPadding($breakpoints) {
  $cleanBreakpoints: ();
  @each $name, $breakpoint in $breakpoints {
    $cleanBreakpoints: map-merge(
      $cleanBreakpoints,
       ($name: map-merge($breakpoint,  (padding: calc(#{map-get($breakpoint, gutter)} / 2))))
    );
  }

  @return $cleanBreakpoints;
}

// Merge standard and custom breakpoints into list
@function allBreakpoints($breakpoints, $extraBreakpoints, $first, $last) {
  $allBreakpoints: $breakpoints;
  @each $currentBreakpoint in $extraBreakpoints {
    $extraBreakpointName: nth($currentBreakpoint, 1);
    $extraBreakpointWidth: nth($currentBreakpoint, 2);
    $found: false;
    $match: null;
    @each $majorBreakpoint in $breakpoints {
      @if $found == false {
        @if map-get(nth($majorBreakpoint, 2), breakpoint) > $extraBreakpointWidth {
          $found: true;
        } @else {
          $match: $majorBreakpoint;
        }
      }
    }
    @if $extraBreakpointWidth > map-get($last, breakpoint) {
      $match: (last, $last);
    }
    @if $extraBreakpointWidth < map-get($first, breakpoint) {
      $match: (first, $first);
    }

    $newBreakpoint: map-merge(nth($match, 2),  (breakpoint: $extraBreakpointWidth));
    $currentBreakpoint: ($extraBreakpointName: map-merge(nth($match, 2),  (breakpoint: $extraBreakpointWidth)));
    $allBreakpoints: map-merge($allBreakpoints, $currentBreakpoint);
  }

  @return maps-sort($allBreakpoints, breakpoint);
}

@function columnStringWidth($string, $multiple) {
  @return 1rem;
}

@function columnWidth($breakpoint, $first, $last, $i, $columnAmount) {
  $columnSize: 100 / map-get($breakpoint, columns) * $i * map-get($breakpoint, columns) / $columnAmount;
  $margin: 0;
  $type: 'vw';
  @if map-get($breakpoint, margin) {
    $margin: map-get($breakpoint, margin) * 2;
  }
  @if (map-get($breakpoint, margin) != null and
map-get($breakpoint, margin) != 0) {
    $columnSize: calc( (#{100vw} - #{$margin}) * #{roundDecimal($i / $columnAmount, 3, floor)});
    $type: '';
  }

  @return #{$columnSize}#{$type};
}

@function isSameBreakpoint($a, $b) {
  @return map-get($a, breakpoint) == map-get($b, breakpoint);
}

// _decimal.scss | MIT License | gist.github.com/terkel/4373420
@function roundDecimal ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

// _decimal.scss | MIT License | gist.github.com/terkel/4373420
@function roundDecimal ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

/// String to number converter
/// @author Hugo Giraudel
@function stringToNumber($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}
